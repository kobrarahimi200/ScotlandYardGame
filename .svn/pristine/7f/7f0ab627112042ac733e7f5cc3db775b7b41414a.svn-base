package logic;

import com.google.gson.Gson;
import com.google.gson.JsonParser;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;

public class IO {

    final String inPath = "C:\\Users\\kobra\\Desktop\\map.json";

    @SuppressWarnings("unchecked")
    public static void main(String[] args) {
        //JSON parser object to parse read file
        Gson gson = new Gson();
//        /Map map = new Map();
        JsonParser parser = new JsonParser();
        //JsonObject object1 = parser.parse("C:\\Users\\Reyhan\\Desktop\\map.json").getAsJsonObject().getAsJsonObject("object1");
        try (FileReader reader = new FileReader("C:\\Users\\Reyhan\\Desktop\\map.json")) {
            //Read JSON file// 1. JSON file to Java object
      
            Object obj = gson.fromJson(reader, Object.class);
            String json = "C:\\Users\\Reyhan\\Desktop\\map.json";
            
            JsonReader reade = new JsonReader(new StringReader(json));
            	reade.beginArray();
		while (reade.hasNext()) {
			JsonToken token = reade.peek();
			if (token.equals(JsonToken.BEGIN_ARRAY))
				handleArray(reade);
			else if (token.equals(JsonToken.END_OBJECT)) {
				reade.endObject();
				return;
			} else
				handleNonArrayToken(reade, token);
                        System.out.println("a k" + reade);
		}
 

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        
    }
    	/**
	 * Handle an Object. Consume the first token which is BEGIN_OBJECT. Within
	 * the Object there could be array or non array tokens. We write handler
	 * methods for both. Noe the peek() method. It is used to find out the type
	 * of the next token without actually consuming it.
	 * 
	 * @param reader
	 * @throws IOException
	 */
	private static void handleObject(JsonReader reader) throws IOException
	{
		reader.beginObject();
		while (reader.hasNext()) {
			JsonToken token = reader.peek();
			if (token.equals(JsonToken.BEGIN_ARRAY))
				handleArray(reader);
			else if (token.equals(JsonToken.END_OBJECT)) {
				reader.endObject();
				return;
			} else
				handleNonArrayToken(reader, token);
		}
 
	}
        	/**
	 * Handle a json array. The first token would be JsonToken.BEGIN_ARRAY.
	 * Arrays may contain objects or primitives.
	 * 
	 * @param reader
	 * @throws IOException
	 */
	public static void handleArray(JsonReader reader) throws IOException
	{
		reader.beginArray();
		while (true) {
			JsonToken token = reader.peek();
			if (token.equals(JsonToken.END_ARRAY)) {
				reader.endArray();
				break;
			} else if (token.equals(JsonToken.BEGIN_OBJECT)) {
				handleObject(reader);
			} else if (token.equals(JsonToken.END_OBJECT)) {
				reader.endObject();
			} else
				handleNonArrayToken(reader, token);
		}
	}
        
	/**
	 * Handle non array non object tokens
	 * 
	 * @param reader
	 * @param token
	 * @throws IOException
	 */
	public static void handleNonArrayToken(JsonReader reader, JsonToken token) throws IOException
	{
		if (token.equals(JsonToken.NAME))
			System.out.println(reader.nextName());
		else if (token.equals(JsonToken.STRING))
			System.out.println(reader.nextString());
		else if (token.equals(JsonToken.NUMBER))
			System.out.println(reader.nextDouble());
		else
			reader.skipValue();
	}
}
