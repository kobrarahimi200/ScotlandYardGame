package logic;

/**
 * this class is responsible for input and output, reading the json file and
 * store it in an array of stations. it also saves the game with given
 * parameters in a json file. and last one is loading the game with given
 * parameters and return the new game.
 */
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.stream.JsonReader;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.List;
import java.util.Scanner;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;
import logic.JsonSaveLoad.SLDetectives;
import logic.JsonSaveLoad.SaveLoadDetective;
import logic.JsonSaveLoad.SaveLoadMisterX;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class IO {

    //String inPath = "C:\\Users\\Reyhan\\Desktop\\map.json";
    FileOutputStream f = null;
    FileChooser fileChooser = null;
    OutputStreamWriter o = null;
    Object saveObj;
    GUIConnector gui;
    Game game;
    SaveObj saveobject;
    SaveObj loadObject;
    Object obj;
    int errorNum = 0;

    public IO() throws JSONException {
        getJsonValues();
    }

    public Stations[] getJsonValues() throws JSONException {
        Gson gson = new Gson();
        JSONArray jarray = null;
        Stations[] stations = new Stations[199];
        JsonValidation validation;
        try {
            FileReader reader = new FileReader("net.json");
            JsonReader jreader = new JsonReader(reader);

            JsonStation js = gson.fromJson(jreader, JsonStation.class);
            validation = new JsonValidation(js.getStations());
            if (validation.getErrorLoadNumber() == 0) {

                for (int i = 0; i < js.getStations().length; i++) {
                    stations[i] = js.getStations()[i];
                }
            }

        } catch (FileNotFoundException e) {

        } catch (com.google.gson.JsonParseException e) {
            gui.showMsg(errorNum);
        }
        return stations;
    }

    public Object getMapJson() {
        return this.obj;
    }

    public static boolean isJSONValid(String test) {
        try {
            JSONObject jsonObject = new JSONObject(test);
        } catch (JSONException ex) {
            // edited, to include @Arthur's comment
            // e.g. in case JSONArray is valid as well...
            try {
                JSONArray jsonArray = new JSONArray(test);
            } catch (JSONException ex1) {
                return false;
            }
        }
        return true;
    }

    public void saveField(SaveObj saveObject)
            throws IOException, JSONException {
        this.saveobject = saveObject;
        FileChooser chooser = new FileChooser();
        chooser.setInitialDirectory(new File(System.getProperty("user.dir")));
        chooser.setTitle("Choose location To Save Report");
        File selectedFile = null;
        if (selectedFile == null) {
            chooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter(".json", ".json"),
                    new ExtensionFilter(".txt", ".txt"));
            selectedFile = chooser.showSaveDialog(null);
        }
        if (selectedFile != null) {
            saveObj = setSave();
            Gson gson = new GsonBuilder().setPrettyPrinting().create();

            try (FileWriter writer = new FileWriter(selectedFile.getPath())) {
                gson.toJson(setSave(), writer);
                //JSON.write(writer, data);
                //  writer.endObject();
                writer.flush();
            } catch (IOException e) {
            }
        }
    }

    /**
     * create json object for each type of player with the given parameters,
     * idxPalyer is the id of the current player, p is the array of players and
     * lastShonPos is the last shown position of mister x.
     *
     * @param p
     * @param idxPlayer
     * @param lastShowPos
     * @return
     * @throws JSONException
     */
    private Object setSave() throws JSONException {
        int[] possibleTargets = new int[0];
        int[] remainingTikets = saveobject.getRemainingTickets();
        List<Integer> journeyBoard = saveobject.getJourneyBoard();
        JsonArray players;
        JsonObject MisterX = new JsonObject(); //add new json object
        JsonObject detectives = new JsonObject();
        //mister x
        MisterX.addProperty("ai", saveobject.isMisterXAI());//mister x is AI or not
        MisterX.add("possibleTargets", new Gson().toJsonTree(possibleTargets));//add json lement to object
        MisterX.addProperty("lastShownPos", saveobject.getLastShownPos());
        MisterX.addProperty("currPos", saveobject.getCurrPosOfMisterX());//add value to json object
        MisterX.add("remainingTickets", new Gson().toJsonTree(remainingTikets));
        MisterX.add("journeyBoard", new Gson().toJsonTree(journeyBoard));
        //detectives
        players = new JsonArray();
        for (int i = 1; i < saveobject.getPlayers().length; i++) {
            JsonObject playersChilds = new JsonObject();
            int[] reaminigTicketDetc = new int[saveobject.getPlayers()[i].getAllTickets().length - 1];
            for (int j = 0; j < reaminigTicketDetc.length; j++) {
                reaminigTicketDetc[j] = saveobject.getPlayers()[i].getAllTickets()[j];

            }
            playersChilds.addProperty("position", saveobject.getPlayers()[i].getCurrStation());
            playersChilds.add("remainingTickets", new Gson().toJsonTree(reaminigTicketDetc));
            //players.set(i, playersChilds);
            players.add(playersChilds);
        }
        detectives.addProperty("noOfDetectives", saveobject.getPlayers().length - 1);
        detectives.addProperty("ai", saveobject.isDetectiveAI());
        detectives.add("players", new Gson().toJsonTree(players));

        //players.add(new Gson().toJsonTree(MisterX));
        JsonObject mainObj = new JsonObject();
        mainObj.add("misterX", new Gson().toJsonTree(MisterX));
        mainObj.add("detectives", new Gson().toJsonTree(detectives));
        System.out.println(" ++++++  whose turn save " + saveobject.getWhosTurn());
        mainObj.addProperty("whosTurn", saveobject.getWhosTurn());
        mainObj.addProperty("currRoundNo", saveobject.getPlayers()[0].getJournyList().size());
        mainObj.addProperty("gameIsWon", saveobject.getIsWon());
        MisterX = mainObj;
        return MisterX;
    }

    /**
     * read the file and convert each line of file to symbol/
     *
     * @param gui
     * @param game
     * @return
     * @throws IOException
     * @throws org.json.JSONException
     */
    public Game loadFile(GUIConnector gui, Game game) throws IOException, JSONException {
        this.gui = gui;
        this.gui.clear();
        this.game = game;
        String line = "";
        String fileString = "";
        FileReader fr = null;
        BufferedReader br = null;
        InputStreamReader sr = null;
        Scanner sc = null;
        FileChooser chooser = new FileChooser();
        chooser.setInitialDirectory(new File(System.getProperty("user.dir")));
        chooser.setTitle("Choose your load file");
        File selectedFile = null;
        if (selectedFile == null) {
            selectedFile = chooser.showOpenDialog(null);
        }
        try {
            if (selectedFile != null) {
                fr = new FileReader(selectedFile.getPath());
                sr = new InputStreamReader(System.in);
                // work
                br = new BufferedReader(fr);
                sc = new Scanner(sr);
                while ((line = br.readLine()) != null) {
                    fileString = fileString + line + "\n";
                }
            }
        } finally {
            // close
            if (sc != null) {
                sc.close();
            }
            if (br != null) {
                br.close();
            }
            if (sr != null) {
                sr.close();
            }
            if (fr != null) {
                fr.close();
            }
        }
        return selectedFile != null ? loadAllFileString(fileString) : this.game;
    }

    /**
     * convert the given string to board by splitting each line.
     *
     * @param fileString is the given file to convert
     * @return a new game with all elements inside the converted board
     */
    private Game loadAllFileString(String fileString) throws JSONException, IOException {
        
        Gson gson = new Gson();
        JsonSaveLoad obj = gson.fromJson(fileString, JsonSaveLoad.class);

        int idxPlayer = obj.getWhosTurn();
        boolean isWon = obj.isGameIsWon();
        boolean detectiveAI = obj.getDetectives().isAi();
        Player[] players = new Player[obj.getDetectives().getNoOfDetectives() +1] ;
        int noOfDetectives = obj.getDetectives().getPlayers().length;
        SLDetectives[] detecPlayers = new SLDetectives[noOfDetectives];
        for (int i = 1; i <noOfDetectives; i++) {//store all players in jsonobjects
            detecPlayers[i] = obj.getDetectives().getPlayers()[i];
        }
     
        players[0] = new MisterX(0, playerType.MISTERX, obj.getMisterX().isAI(),
                obj.getMisterX().getRemainingTickets()[0],
                obj.getMisterX().getRemainingTickets()[1], 
                obj.getMisterX().getRemainingTickets()[2], 
                obj.getMisterX().getRemainingTickets()[3]);

       // System.out.println("mister x ai " +  obj.getMisterX().getRemainingTickets()[3]);
        for (int i = 1; i < noOfDetectives +1; i++) {
            players[i] = new Detectives(i,
                    playerType.BLUE,
                    detectiveAI,
                    obj.getDetectives().getPlayers()[i-1].getRemainingTickets()[0],
                    obj.getDetectives().getPlayers()[i-1].getRemainingTickets()[1],
                    obj.getDetectives().getPlayers()[i-1].getRemainingTickets()[2],
                   0);
        }
        // set the current position for players 
        players[0].setCurrStation(obj.getMisterX().getCurrPos());
        for (int i = 0; i < obj.getMisterX().getJourneyBoard().length; i++) {
           players[0].addToJourneyList(Tickets.values()[obj.getMisterX().getJourneyBoard()[i]]);
           this.gui.showMisterXTicket(Tickets.values()[obj.getMisterX().getJourneyBoard()[i]].toString());
        }
        
        for (int i = 1; i < players.length ; i++) {
            players[i].setCurrStation(obj.getDetectives().getPlayers()[i-1].getPosition());
        }
      
        int errorFormat = 0;
        Board temp = new Board();
        if (temp != null) {
            this.game = new Game(temp, gui, players, idxPlayer, noOfDetectives, isWon);
        } else {
            errorFormat = 1;
            gui.showMsg(errorFormat);
        }

        return this.game;
    }
    
    void saveTest(Player[] players, boolean detectiveAI, boolean misterXAI, 
            int[] possibleTargets, boolean gameIsWon, int whosTurn){
        
        JsonSaveLoad saveObj = new JsonSaveLoad();
        
        SLDetectives[] detectivesPl = new SLDetectives[players.length - 1];
        
        for (int i = 0; i < detectivesPl.length; i++) {
            detectivesPl[i] = new SLDetectives();
            detectivesPl[i].setPosition(players[i+1].getCurrStation());
            detectivesPl[i].setRemainingTickets(new int[] {players[i+1].getNumOfTrains(), 
                players[i+1].getNumOfBuses(), players[i+1].getNumOfTaxis()});
        }
        
        SaveLoadDetective detectives = new SaveLoadDetective();
        
        detectives.setAi(detectiveAI);
        detectives.setNoOfDetectives(players.length - 1);
        detectives.setPlayers(detectivesPl);
        
       SaveLoadMisterX misterX = new SaveLoadMisterX();
       
       misterX.setAI(misterXAI);
       misterX.setCurrPos(players[0].getCurrStation());
       misterX.setJourneyBoard(players[0].getJournyList().stream().mapToInt(Integer::intValue).toArray());
       misterX.setLastShownPos(players[0].getCurrStation());// TODO last shown position
       misterX.setPossibleTargets(possibleTargets);
       misterX.setRemainingTickets(new int[]{players[0].getNumOfTrains(), 
                players[0].getNumOfBuses(), players[0].getNumOfTaxis(), players[0].getNumOfBoats()});
 
       saveObj.setMisterX(misterX);
       saveObj.setDetectives(detectives);
       saveObj.setGameIsWon(gameIsWon);
       saveObj.setCurrRoundNo(players[0].getJournyList().size());
       saveObj.setWhosTurn(whosTurn);
       
       /******************************************************************/
       
       FileChooser chooser = new FileChooser();
        chooser.setInitialDirectory(new File(System.getProperty("user.dir")));
        chooser.setTitle("Choose location To Save Report");
        File selectedFile = null;
        if (selectedFile == null) {
            chooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter(".json", ".json"),
                    new ExtensionFilter(".txt", ".txt"));
            selectedFile = chooser.showSaveDialog(null);
        }
        if (selectedFile != null) {
           
            Gson gson = new GsonBuilder().setPrettyPrinting().create();

            try (FileWriter writer = new FileWriter(selectedFile.getPath())) {
                gson.toJson(saveObj, writer);
                //JSON.write(writer, data);
                //  writer.endObject();
                writer.flush();
            } catch (IOException e) {
            }
        }
       
       
       
       
       
    }
    private int[] listToArray(List<Integer> list){
       return list.stream().mapToInt(Integer::intValue).toArray();

    }
}
