/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.beans.value.ChangeListener;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import logic.Game;
import org.json.JSONException;

/**
 *
 * @author Reyhan
 */
public class FXMLDocumentController implements Initializable {

    private Label label;
    @FXML
    private Pane outerPane;
    @FXML
    private Pane innerPane;
    private final String imgPath = "gui/img/";
    private final String imgExt = ".bmp";
    @FXML
    private GridPane grdMisterXTickets;
    @FXML
    private GridPane grdTickets;
    private ComboBox drpNumOfDetectives;
    private CheckBox checkBoxMisterX;
    private CheckBox checkBoxDetective;
    ImageView imgViewMap;
    double coordX = 0;
    double coordY = 0;
    private Pane paneAI;
    JavaFxGUI gui;
    Game game;
    private boolean AIMisterX = false;
    private boolean AIDetectives = false;
    private int numOfDetectives = 3;
    @FXML
    private Label idxPlayer;
    @FXML
    private Label lblNumOfTaxi;
    @FXML
    private Label lblNumOfBuses;
    @FXML
    private Label lblNumOfTrains;
    @FXML
    private Label lblNumOfBoats;
    private Label[] lblArrays = new Label[24];
    @FXML
    private Label lbl2;
    @FXML
    private Label lbl3;
    @FXML
    private Label lbl5;
    @FXML
    private Label lbl1;
    @FXML
    private Label lbl4;
    @FXML
    private Label lbl6;
    @FXML
    private Label lbl7;
    @FXML
    private Label lbl9;
    @FXML
    private Label lbl10;
    @FXML
    private Label lbl11;
    @FXML
    private Label lbl12;
    @FXML
    private Label lbl14;
    @FXML
    private Label lbl16;
    @FXML
    private Label lbl15;
    @FXML
    private Label lbl17;
    @FXML
    private Label lbl22;
    @FXML
    private Label lbl21;
    @FXML
    private Label lbl20;
    @FXML
    private Label lbl19;
    @FXML
    private Label lbl23;
    @FXML
    private Label lbl8;
    @FXML
    private Label lbl13;
    @FXML
    private Label lbl18;
    @FXML
    private Label lbl24;
    private Label lblQuestion = new Label(" ");
    ;
    @FXML
    private MenuItem loadBtn;
    @FXML
    private CheckBox cheatMisterX;
    @FXML
    private CheckBox useBlackTicket;
    boolean blackTicket = false;

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        setImageToButtons();

        double width = innerPane.getPrefWidth();
        double height = innerPane.getPrefHeight();
        storeInLblArray();

        firstWindowsPlayersSetting();

        ChangeListener<Number> stageSizeListener = (observable, oldValue, newValue) -> {
            int diffWidth = (int) (outerPane.getWidth() - outerPane.getPrefWidth());
            int diffHeight = (int) (outerPane.getHeight() - outerPane.getPrefHeight());
            //System.out.println("width " + width + " height " + height);
            innerPane.setPrefWidth(width + Math.min(diffWidth, diffHeight));
            innerPane.setPrefHeight(height + Math.min(diffWidth, diffHeight));
        };
        outerPane.widthProperty().addListener(stageSizeListener);
        outerPane.heightProperty().addListener(stageSizeListener);

    }

    @FXML
    private void onClickBtnStart(ActionEvent event) throws JSONException {
        storeInLblArray();
        setImageToButtons();

        if (game != null) {
            this.game.clear();
        }
        firstWindowsPlayersSetting();

    }

    private void onClickBtnOk(ActionEvent event) throws JSONException, IOException {
        this.paneAI.setDisable(true);
        this.grdMisterXTickets.setDisable(false);
        this.grdTickets.setDisable(false);
        this.AIMisterX = checkBoxMisterX.isSelected();
        this.AIDetectives = checkBoxDetective.isSelected();
        numOfDetectives = Integer.parseInt(drpNumOfDetectives.getSelectionModel().getSelectedItem().toString());
//        System.out.println("misterX " + AIMisterX + "Detec  " + AIDetectives
//                + " DropDown " + numOfDetectives);
        this.game = new Game(1, this.numOfDetectives, AIMisterX, AIDetectives, gui);

//        System.out.println("coordx" + coordX + "xoordy " + coordY);
        this.game.assignStartingPoint();

    }

    private void setImageToButtons() {
        //rotate button picture 
        imgViewMap = new ImageView();
        imgViewMap.setImage(new Image(imgPath + "Spielplan" + imgExt));
        innerPane.getChildren().add(imgViewMap);
        imgViewMap.fitWidthProperty().bind(innerPane.widthProperty());
        imgViewMap.fitHeightProperty().bind(innerPane.heightProperty());
    }

    /**
     * with this action event exit from the game and windows is closed
     *
     * @param event
     */
    @FXML
    private void exit(ActionEvent event) {
        ScotlandYard_Rahimi.mainLoginScene.getWindow().hide();
    }

    /**
     * with this action event exit from the game and windows is closed
     *
     * @param event
     */
    @FXML
    private void save(ActionEvent event) throws JSONException {
        this.game.save();
    }

    /**
     * this game is setted to the loaded game
     *
     * @param event
     */
    @FXML
    private void load(ActionEvent event) throws JSONException {
        this.innerPane.setDisable(false);
        if (this.game != null) {
            this.game = this.game.load(game);
        }
    }

    @FXML
    private void onClickMap(MouseEvent event) throws IOException {
        coordX = event.getX();
        coordY = event.getY();
        this.game.setCoordinates(coordX, coordY, innerPane.getWidth(), innerPane.getHeight());
        blackTicket = useBlackTicket.isSelected();
        try {
            this.game.displayPlayer(blackTicket);
        } catch (JSONException ex) {
            Logger.getLogger(FXMLDocumentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(FXMLDocumentController.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void firstWindowsPlayersSetting() {
        Label secondLabel = new Label("Number of Detectives");
        ComboBox FirstDropDown = new ComboBox();
        FirstDropDown.getItems().addAll("3", "4", "5");
        FirstDropDown.setValue("3");
        CheckBox misterX = new CheckBox("MisterX is controlled by AI");
        CheckBox detectiveSelection = new CheckBox("Detectives are controled by AI");
        misterX.setSelected(true);
        Button btnOk = new Button("OK");
        StackPane secondaryLayout = new StackPane();
        secondaryLayout.getChildren().addAll(secondLabel, FirstDropDown, misterX, detectiveSelection);
        secondaryLayout.getChildren().add(btnOk);
        btnOk.setPrefSize(75, 25);
        secondLabel.setTranslateX(-40);
        secondLabel.setTranslateY(-50);
        FirstDropDown.setTranslateX(60);
        FirstDropDown.setTranslateY(-50);
        misterX.setTranslateX(-20);
        misterX.setTranslateY(0);
        detectiveSelection.setTranslateX(-10);
        detectiveSelection.setTranslateY(20);
        btnOk.setTranslateX(0);
        btnOk.setTranslateY(50);
        Scene secondScene = new Scene(secondaryLayout, 250, 150);
        // New window (Stage) is created
        Stage smallWindow = new Stage();
        smallWindow.setTitle("First Windows");
        smallWindow.setScene(secondScene);
        // Set position of second window, related to primary window.
        smallWindow.setX(500);
        smallWindow.setY(400);
        smallWindow.setAlwaysOnTop(true);
        smallWindow.show();
        btnOk.setOnAction((ActionEvent e) -> {
            if (FirstDropDown.getValue().equals("3")) {
                numOfDetectives = 3;
            } else if (FirstDropDown.getValue().equals("4")) {
                numOfDetectives = 4;

            } else if (FirstDropDown.getValue().equals("5")) {
                numOfDetectives = 5;
            } else {
                numOfDetectives = 3;
            }
            //TODO : change his part from if condition to this format
            this.AIMisterX = misterX.isSelected();
            this.AIDetectives = detectiveSelection.isSelected();
            smallWindow.close();
             useBlackTicket.setDisable(false);
            gui = new JavaFxGUI(grdMisterXTickets, grdTickets, innerPane, imgViewMap, idxPlayer,
                    lblNumOfTrains, lblNumOfBuses, lblNumOfTaxi, lblNumOfBoats, lblArrays, lblQuestion,useBlackTicket);
            try {
                this.game = new Game(1, this.numOfDetectives, AIMisterX, AIDetectives, gui);
            } catch (JSONException ex) {
                Logger.getLogger(FXMLDocumentController.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FXMLDocumentController.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.innerPane.setDisable(false);
        });
    }

    private void storeInLblArray() {
        lblArrays[0] = lbl1;
        lblArrays[1] = lbl2;
        lblArrays[2] = lbl3;
        lblArrays[3] = lbl4;
        lblArrays[4] = lbl5;
        lblArrays[5] = lbl6;
        lblArrays[6] = lbl7;
        lblArrays[7] = lbl8;
        lblArrays[8] = lbl9;
        lblArrays[9] = lbl10;
        lblArrays[10] = lbl11;
        lblArrays[11] = lbl12;
        lblArrays[12] = lbl13;
        lblArrays[13] = lbl14;
        lblArrays[14] = lbl15;
        lblArrays[15] = lbl16;
        lblArrays[16] = lbl17;
        lblArrays[17] = lbl18;
        lblArrays[18] = lbl19;
        lblArrays[19] = lbl20;
        lblArrays[20] = lbl21;
        lblArrays[21] = lbl22;
        lblArrays[22] = lbl23;
        lblArrays[23] = lbl24;
    }

}
