/**
 * JSON Schema is a declarative language for validating the format and structure
 * of a JSON Object. It allows us to specify the number of special primitives to
 * describe exactly what a valid JSON Object will look like.
 */
package logic;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author ite102770
 */
public class JsonValidation {

    private int errorNumber = 0;
    JSONArray stations = null;
    JSONObject jsonObj = null;
    JSONObject keys = null;
    private int errorLoadNum = 0;
   // String inPath = "C:\\Users\\Reyhan\\Documents\\NetBeansProjects\\ScotlandYard_Rahimi\\src\\gui\\img\\test.json";
    JSONObject json;

    public JsonValidation(Stations[] stations) throws JSONException {
        validate(stations);
    }

    public JsonValidation() throws JSONException {
       // json = new JSONObject(inPath);
       // System.out.println("*** " + json.toString());
        if (errorLoadNum == 0) {
            loadFileValidation(json);
        }
        if (errorLoadNum == 0) {
            checkMisterXKeys(json);
        }
        if (errorLoadNum == 0) {
            checkArraysLength(json);
        }
    }

    int getErrorNumber() {
        return this.errorNumber;
    }

    int getErrorLoadNumber() {
        return this.errorLoadNum;
    }

    private int validate(Stations[] stations) throws JSONException {
        assert stations != null;
        boolean isValidate = false;
        //jsonObj = new JSONObject(jsonMap.toString());
//        if(jsonObj.equals(" ")){
//            errorNumber = 16;
//        }
        if (stations.equals(null)) {
            errorNumber = 1;
        }
        if (errorNumber == 0) {
            errorNumber = stationHasKey(stations);
        }
        if (errorNumber == 0) {
            errorNumber = checkKeysValidation(stations);
        }
        return errorNumber;
    }

    private int stationHasKey(Stations[] stations) throws JSONException {
       // stations = jsonObj.getJSONArray("stations");
       Stations key = new Stations();
        for (int i = 0; i < stations.length; i++) {
            key = stations[i];
            if (!((Integer) stations[i].getIdentifier() instanceof Integer)) {
                errorNumber = 2;
            } else if (stations[i].getPosition().equals(null)) {
                errorNumber = 3;
            } else if (stations[i].getTube().equals(null)) {
                errorNumber = 4;
            } else if (stations[i].getBus().equals(null)) {
                errorNumber = 5;
            }
              else if (stations[i].getCab().equals(null)) {
                errorNumber = 5;
            }else if (stations[i].getBoat().equals(null)) {
                errorNumber = 6;
            } else if (stations[i].getPosition() || 
                    !keys.optJSONObject("position").has("y")) {
                errorNumber = 7;
            }
        }
        if (stations.length != 199) {
           lengthInvalid();
            errorNumber = 8;
        }
        return errorNumber;
    }

    private int checkKeysValidation(Stations[] stations) throws JSONException {
       // System.out.println("inside checkIdentifier");
        for (int i = 0; i < stations.length; i++) {
                if ( stations[i].getIdentifier() <= 0 ||  stations[i].getIdentifier() >= 200) {
                    errorNumber = 9;
                }
                if ( stations[i].getPosition().x() < 0.0
                        ||  stations[i].getPosition().x() >= 1.0) {
                    errorNumber = 10;
                }
                if ( stations[i].getPosition().y() < 0.0
                        ||  stations[i].getPosition().y() > 1.0 && errorNumber == 0) {
                    errorNumber = 11;
                }
        
        }
        return errorNumber;
    }

    private int loadFileValidation(JSONObject json) {
        if (!json.has("misterX")) {
            errorLoadNum = 1;
        } else if (!json.has("detectives")) {
            errorLoadNum = 2;
        } else if (!json.has("whoseTurn")) {
            errorLoadNum = 3;
        } else if (!json.has("currRoundNo")) {
            errorLoadNum = 4;
        } else if (!json.has("gameIsWon")) {
            errorLoadNum = 5;
        }
        return errorLoadNum;
    }

    private int checkMisterXKeys(JSONObject json) throws JSONException {
        JSONObject misterX = json.getJSONObject("misterX");
        if (!misterX.has("ai")) {
            errorLoadNum = 6;
        } else if (!misterX.has("possibleTargets")) {
            errorLoadNum = 7;
        } else if (!misterX.has("lastShownPos")) {
            errorLoadNum = 8;
        } else if (!misterX.has("currPos")) {
            errorLoadNum = 9;
        } else if (!misterX.has("remainingTickets")) {
            errorLoadNum = 10;
        } else if (!misterX.has("journeyBoard")) {
            errorLoadNum = 11;
        }
        return errorLoadNum;
    }

    private int checkArraysLength(JSONObject json) throws JSONException {
        JSONObject misterX = json.getJSONObject("misterX");
        if (misterX.has("possibleTargets")) {
            if (misterX.getJSONArray("possibleTargets").length() < 0) {
                errorLoadNum = 12;
            }
        }
        for (int i = 0; i < misterX.getJSONArray("possibleTargets").length(); i++) {
            Object key = misterX.getJSONArray("possibleTargets").get(i);
            if (misterX.has("possibleTargets")) {
                if (!(key instanceof Integer)) {
                    errorLoadNum = 13;
                }
            }

        }
        for (int i = 0; i < misterX.getJSONArray("remainingTickets").length(); i++) {
            Object key = misterX.getJSONArray("remainingTickets").get(i);
            if (misterX.has("remainingTickets")) {
                if (!(key instanceof Integer)) {
                    errorLoadNum = 14;
                }
            }

        }
        for (int i = 0; i < misterX.getJSONArray("journeyBoard").length(); i++) {
            Object key = misterX.getJSONArray("journeyBoard").get(i);
            if (misterX.has("journeyBoard")) {
                if (!(key instanceof Integer)) {
                    errorLoadNum = 15;
                }
            }

        }
        return errorLoadNum;
    }

    private int checkTypeOfKeys(JSONObject json) throws JSONException {
        JSONObject misterX = json.getJSONObject("misterX");
        if (misterX.has("lastShownPos")) {
            if (!(misterX.get("lastShownPos") instanceof Integer)) {
                errorLoadNum = 16;
            }
        }
        if (misterX.has("currPos")) {
            if (!(misterX.get("currPos") instanceof Integer)) {
                errorLoadNum = 16;
            }
        }
//            if (misterX.get("currPos") < 0 || misterX.get("currPos") > 200) {
//                errorLoadNum = 16;
//            } else {
//            }
        return errorLoadNum;
    }

    private void lengthInvalid() {
        throw new UnsupportedOperationException("value or length is grater than 199"); 
    }

}
