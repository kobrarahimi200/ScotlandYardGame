package gui;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonBar;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Polygon;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import logic.GUIConnector;
import logic.Game;
import logic.Position;
import logic.Tickets;
import logic.playerType;
import org.json.JSONException;

/**
 *
 * @author Reyhan
 */
public class JavaFxGUI implements GUIConnector {

    private final GridPane grdMisterXTickets;
    private final GridPane grdTickets;
    private final Pane innerPane;
    private final ImageView imgMap;
    Circle circle0 = null;
    Circle circle1 = null;
    Circle circle2 = null;
    Circle circle3 = null;
    Circle circle4 = null;
    Circle circle5 = null;
    Polygon[] polygons = new Polygon[6];
    Polygon polygon1 = null;
    Polygon polygon2 = null;
    Polygon polygon3 = null;
    Polygon polygon4 = null;
    Polygon polygon5 = null;
    Circle[] circles = new Circle[6];
    Label nomOfTaxis;
    Label nomOfBuses;
    Label nomOfTrains;
    Label nomOfBoats;
    private Label lblWinner;
    private Label[] lbaArray = new Label[24];
    private String imgPath = "gui/img/";
    private String imgExt = ".png";
    Image image = null;
    int idLables = 0;
    Label lblQuestion = new Label(" ");

    private Label lblPlayer;  // ComboBox<String> choices = new ComboBox<>();
    ComboBox<String> comboBox = null;
    Tickets ticket;
    Rectangle rec = null;
    boolean isSelected = false;
    Game game;
    ImageView imageViewMisterX = null;
    CheckBox blackTicket;

    public JavaFxGUI(GridPane grdMister, GridPane grdTicket, Pane innerPane,
            ImageView map, Label lblPlayer, Label trains, Label buses, Label taxis,
            Label boats, Label[] lblArray, Label lblQuestion, CheckBox blackTicket) {
        this.grdMisterXTickets = grdMister;
        this.grdTickets = grdTicket;
        this.innerPane = innerPane;
        this.imgMap = map;
        this.lblPlayer = lblPlayer;
        this.nomOfTrains = trains;
        this.nomOfBuses = buses;
        this.nomOfTaxis = taxis;
        this.nomOfBoats = boats;
        this.lbaArray = lblArray;
        this.lblQuestion = lblQuestion;
        this.blackTicket = blackTicket;
    }

    @Override
    public void displaySymbol(Position coord, int idPlayer, boolean isStaringPoint) {
        System.out.println("gui id" + idPlayer);
        String color = "";
        if (idPlayer == 0) {
            color = "orange";
            lblQuestion.setText("?");
            //imageViewMisterX = new ImageView(new Image(imgPath + "BOAT" + imgExt));
            // imageViewMisterX.setClip(circles[idPlayer]);
        } else {
            //imageViewMisterX = null;
            // lblQuestion.setText(" ");
            color = playerType.values()[idPlayer].toString().toLowerCase();
        }
        if (polygons[idPlayer] != null) {
            this.innerPane.getChildren().remove(polygons[idPlayer]);
        }
        if (circles[idPlayer] != null) {
            this.innerPane.getChildren().remove(circles[idPlayer]);
        }
        if (comboBox != null) {
            this.innerPane.getChildren().remove(comboBox);
        }
        if (lblQuestion != null && idPlayer == 0) {
            this.innerPane.getChildren().remove(lblQuestion);
        }
        circles[idPlayer] = bindToPane(circles[idPlayer], coord, idPlayer, color);
    }

    private Circle bindToPane(Circle circle, Position coord, int idPlayer, String color) {
        // circle = new Circle(coord.x(), coord.y(), 10.0);
        if (idPlayer == 0) {
            circle = new Circle(coord.x(), coord.y(), 20.0);
            //lblQuestion = new Label("?");
            //lblQuestion.setText("?");
            lblQuestion.setStyle("-fx-text-fill: white");
            lblQuestion.setFont(new Font("Arial", 25));
            lblQuestion.setScaleX(2.3);
            lblQuestion.setScaleY(1);
            //lblQuestion.setStyle("-fx-background-color: pink");
            lblQuestion.translateXProperty().bind(circle.centerXProperty().subtract(6.0));
            lblQuestion.translateYProperty().bind(circle.centerYProperty().subtract(13.0));
        } else {
            circle = new Circle(coord.x(), coord.y(), 10.0);
        }
        circle.setStroke(Color.BLACK);
        //polygon = polygons[idPlayer];     
        //circle.setFill(Paint.valueOf(color.toUpperCase()));
        circle.setStyle("-fx-fill: " + color + ";");
        double xNorm = coord.x();
        double yNorm = coord.y();
        circle.centerXProperty().bind(this.innerPane.widthProperty().multiply(xNorm));
        circle.centerYProperty().bind(this.innerPane.heightProperty().multiply(yNorm));
        polygons[idPlayer] = new Polygon();
        polygons[idPlayer].getPoints().addAll(new Double[]{
            0.0, 0.0,
            -15.0, 15.0,
            15.0, 15.0});
        polygons[idPlayer].setFill(javafx.scene.paint.Color.LIGHTGRAY);
        //polygons[idPlayer].setStyle("-fx-border-color: blue ;");
        polygons[idPlayer].setStroke(Color.BLACK);
        polygons[idPlayer].translateXProperty().bind(circle.centerXProperty());
        polygons[idPlayer].translateYProperty().bind(circle.centerYProperty());
        this.innerPane.getChildren().add(polygons[idPlayer]);
        this.innerPane.getChildren().add(circle);
        if (idPlayer == 0) {
            this.innerPane.getChildren().add(lblQuestion);
        }
        isSelected = false;
        return circle;
    }

    @Override
    public void clear() {
        idLables = 0;
        if (circles != null) {
            for (int i = 0; i < circles.length; i++) {
                this.innerPane.getChildren().remove(circles[i]);
                lblQuestion.setText(" ");
            }
        }
        if (comboBox != null) {
            this.innerPane.getChildren().remove(comboBox);
        }
        if (lbaArray != null) {
            for (int i = 0; i < lbaArray.length; i++) {
                lbaArray[i].setGraphic(null);
            }
        }
        if (polygons != null) {
            for (int i = 0; i < polygons.length; i++) {
                this.innerPane.getChildren().remove(polygons[i]);
            }
        }
    }

    @Override
    public void showCurrentPlayer(int idPlayer) {
        String playerColor = "";
        if (idPlayer == 0) {
            playerColor = "MISTER X";
        } else {
            playerColor = playerType.values()[idPlayer].toString();

        }
        this.lblPlayer.setText(playerColor);
    }

    @Override
    public void showInDropDownList(Game game, boolean[] listOfTicket, Position coord,boolean blackTicket) {
        this.game = game;
        if (comboBox != null) {
            this.innerPane.getChildren().remove(comboBox);
        }
        assert (listOfTicket != null);
        ObservableList<String> options
                = FXCollections.observableArrayList();
        System.out.println("length " + listOfTicket.length);
        if (listOfTicket[0]) {
            options.add(Tickets.TRAIN.toString());
        }
        if (listOfTicket[1]) {
            options.add(Tickets.BUS.toString());
        }
        if (listOfTicket[2]) {
            options.add(Tickets.TAXI.toString());
        }
        if (listOfTicket[3]) {
            options.add(Tickets.BOAT.toString());
        }

        comboBox = new ComboBox(options);
        // comboBox.setValue(options.get(0));
        System.out.println("@@@options " + options);
        if (comboBox != null) {
            comboBox.translateXProperty().bind(this.innerPane.widthProperty().multiply(coord.x()));
            comboBox.translateYProperty().bind(this.innerPane.heightProperty().multiply(coord.y()));
            System.out.println("combo box should be shown");
            innerPane.getChildren().add(comboBox);
        }
        if (comboBox != null) {
            getSElectedItem( blackTicket);
        }
    }

    /**
     * get the selected ticket
     */
    private void getSElectedItem(boolean blackTicket) {
        comboBox.valueProperty().addListener((e) -> {
            String s = comboBox.getValue();
            ticket = Tickets.valueOf(s);
            isSelected = true;
            System.out.println("selected " + ticket);
            try {
                this.game.changeRound(ticket,blackTicket );
            } catch (JSONException ex) {
                Logger.getLogger(JavaFxGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    @Override
    public void updateLabelTicketsNum(int[] numOfTickets) {
        nomOfTrains.setText(numOfTickets[0] + "x");
        nomOfBuses.setText(numOfTickets[1] + "x");
        nomOfTaxis.setText(numOfTickets[2] + "x");
        nomOfBoats.setText(numOfTickets[3] + "x");
    }

    @Override
    public void gameWon(String winnerName, int idPlayer) {
      
        String playerColor = "";
        String text = "Detective ";
        if (winnerName == null) {
            winnerName = "no one";
        }
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Results");
        if (idPlayer == 0) {
            playerColor = "ORANGE";
            text = "Mister X ";
        } else {
            playerColor = playerType.values()[idPlayer].toString();
        }
        alert.setHeaderText("" + text + " with bellow color won the game");
        ButtonBar buttonBar = (ButtonBar) alert.getDialogPane().lookup(".button-bar");
        buttonBar.setStyle("-fx-font-size: 24px;" + "-fx-background-color:" + playerColor + ";");
        alert.showAndWait();
        this.innerPane.setDisable(true);
        this.imgMap.setDisable(true);
        System.out.println("inner pane" + innerPane.disableProperty());

    }

    @Override
    public void showMisterXTicket(String ticket) {
        String img = imgPath + ticket.toUpperCase() + imgExt;
        System.out.println("gui show " + ticket);
        if (!ticket.equals(null)) {
            image = new Image(img);
            ImageView imageViewMisterXTicket = new ImageView(image);
            System.out.println("path @@" + img);
            lbaArray[idLables].setGraphic(imageViewMisterXTicket);
            imageViewMisterXTicket.fitWidthProperty().bind(lbaArray[idLables].widthProperty());
            imageViewMisterXTicket.fitHeightProperty().bind(lbaArray[idLables].heightProperty());
        }
        idLables++;
    }
    @Override
    public void disableBlackTicketCheckBox(boolean isDisable){
        this.blackTicket.setDisable(isDisable);
    }
    @Override
    public void showMsg(int x) {
        switch (x) {
            case -1:
                this.lblWinner.setText("length of board\n is not valid");
                break;
            case 1:
                this.lblWinner.setText("Symbol in board\n is not valid");
                break;
            case 2:
                this.lblWinner.setText("Please Rotate \n the quadrant");
                break;
            case 3:
                this.lblWinner.setText("Please lay \n the ball");
                break;
            case 0:
                this.lblWinner.setText(" ");
                break;
            default:
                break;
        }

    }
}
