package logic;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * this class is implemented for another type of players (Detectives) with all
 * required methods
 *
 * @author kobra
 */
public class Detectives extends Player {

    List<Station> neighborsDetective;
    private Choose choose;

    public Detectives(int id, playerType type, boolean isAI, int numOfTrains, int numOfBuses, int numOfTaxis,
            int numOfBoats) {
        super(id, type, isAI, numOfTrains, numOfBuses, numOfTaxis, numOfBoats);
        choose = null;

    }

    @Override
    protected Choose getChoosedAI() {
        return this.choose;
    }

    /**
     * this method is doing every thing when the one of the detectives turn is
     * and is controlled by AI.
     *
     * @param players
     * @param board
     * @param targetPositions
     * @return the choice to play by
     */
    @Override
    void AI(Board board, Player[] players, List<Station> targetPositions) {

        Choose choose = null;
        Choose temp = null;

        // first strategy: if the player is neighbor with any of terget positions
        List<Station> targetsNeigbors = isNeighborWithTargets(targetPositions);
        Station stFirst = stationWithSmallestId(targetsNeigbors, players, board);
        if (!targetsNeigbors.isEmpty() && stFirst != null) {
            //Station station = stFirst;
//            temp = weightWithDirectNeighborToTargets(targetPositions, board, players, stFirst);
            temp = weightCalc(targetPositions, stFirst, players, board);
            choose = checksIfWeightNotNull(choose, temp);
        }
        // second strategy: if the player is directly neighboring with a train station
        if (trainStationNeighbor(players, board) != null) {
            // temp = weightWithTrainNeighbor(targetPositions, trainStationNeighbor(players, board), players, board);
            temp = weightCalc(targetPositions, trainStationNeighbor(players, board), players, board);
            choose = checksIfWeightNotNull(choose, temp);
        }
        // third strategy: the shortest path from player to averaged position of target positions
        List<Station> path = bestPathToDestination(players, closestToAverageOfStations(board, targetPositions), board);
        if (!path.isEmpty()) {
            //  temp = weightWithShortestPath(targetPositions, path.get(0), players, board);
            temp = weightCalc(targetPositions, path.get(0), players, board);
            choose = checksIfWeightNotNull(choose, temp);
        }
        // forth strategy: move to a neighbor with smallest Identifier
        Station station = stationWithSmallestId(board.getStation(this.getCurrStation()).getAllNeighbors(), players, board);
        if (station != null) {
            //temp = weightWithMoveToSmallestNeighbor(targetPositions, station, players, board);
            temp = weightCalc(targetPositions, station, players, board);
            choose = checksIfWeightNotNull(choose, temp);
        }
        this.choose = choose;
        // return choose;
    }

    /**
     * checks if the given choose is not null, and if they have weight then temp
     * is copied to choose parameter. This method is used for AI
     *
     * @param choose
     * @param temp
     * @return
     */
    private Choose checksIfWeightNotNull(Choose choose, Choose temp) {
        if (choose == null) {
            choose = temp;
        } else {
            if (temp != null && temp.getWeight() > choose.getWeight()) {
                choose = temp;
            }
        }
        return choose;
    }

    protected List<Station> bestPathToDestination(Player[] player, Station station, Board br) {

        //ShortestPathFind bfs = new ShortestPathFind();
        List<Station> neighbors = br.getStation(this.getCurrStation()).getAllNeighbors();
        List<Station> bestPath = new LinkedList<>();

        for (int i = 0; i < neighbors.size(); i++) {

            if (!isOccupiedByDetectives(player, neighbors.get(i)) && canMoveToStation(br.getStation(this.getCurrStation()), neighbors.get(i), br)) {

                List<Station> path = bestPath(neighbors.get(i), station, player);

                if (bestPath.isEmpty()) {
                    bestPath = path;
                } else {
                    if (path.size() < bestPath.size() || (path.size() == bestPath.size() && path.get(0).getIdentifier() < bestPath.get(0).getIdentifier())) {
                        bestPath = path;
                    }
                }
            }
        }

        return bestPath;
    }

    /**
     * this method is check if any of stations in given list is neighbor with
     * current station of the player and add it to temp list. otherwise an empty
     * list will be returned
     *
     * @param stations
     * @return List of station neighboring with current station of the player
     */
    private List<Station> isNeighborWithTargets(List<Station> stations) {
        List<Station> temp = new LinkedList<>();
        for (int i = 0; i < stations.size(); i++) {
            if (stations.get(i).isNeighbor(this.getCurrStation())) {
                temp.add(stations.get(i));
            }
        }
        return temp;
    }

    /**
     * copy
     *
     * @param targetStations
     * @param station
     * @param players
     * @param board
     * @return
     */
    protected Choose weightCalc(List<Station> targetStations, Station station, Player[] players, Board board) {
        double weight = 0.0;
        double sum = 0.0;
        double temp = 0.0;
        Choose choose = null;

        List<Station> path = bestPath(station,
                closestToAverageOfStations(board, targetStations), players);
        if (targetStations.contains(station)) {
            targetStations.remove(station);
        }
        if (targetStations.size() > 0) {
            weight = weight + (neighborsWithStations(targetStations, station) / (targetStations.size()) * 10);
        }
        if (path.size() > 1 && path.size() < 11) {
            weight = weight + (10.0 - path.size() - 1);
        }
        //boolean[] moreRoute = routesByMeans(station, this.getCurrStation());
        boolean[] moreRoute = station.HasMoreNeighbors(this.getCurrStation());
        for (int i = 0; i < moreRoute.length; i++) {
            temp = 0.0;
            if (moreRoute[i] && this.getTicketType(Tickets.values()[i]) > 0) {
                Tickets ticket = Tickets.values()[i];
                this.decTicket(ticket);

                temp = temp + numberOfAvailableStations(station, board) / 13 * 4;//TODO changed type from double to int
                temp = temp + ((this.getMinTicket() > 2) ? 3 : this.getMinTicket());

                if (weight + temp > sum) {
                    sum = weight + temp;
                    choose = new Choose(ticket, station, sum);
                }
                this.incTicket(ticket);
            }
        }
        return choose;
    }

    /**
     * this method is find the station with smallest id from the given list of
     * stations
     *
     * @param stations
     * @return station with smallest id
     */
    private Station stationWithSmallestId(List<Station> stations, Player[] players, Board br) {
        Station station = null;
        for (int i = 0; i < stations.size(); i++) {
            if (!isOccupiedByDetectives(players, stations.get(i))
                    && canMoveToStation(br.getStation(this.getCurrStation()), stations.get(i), br)) {
                if (station == null) {
                    station = stations.get(i);
                } else {
                    if (stations.get(i).getIdentifier() < station.getIdentifier()) {
                        station = stations.get(i);
                    }
                }
            }
        }

        return station;
    }

    /**
     * this method check if the given station can reach to any other stations of
     * the given list and increment the amount of access by 1
     *
     * @param stations
     * @param station
     * @return integer number stations which are neighbors of given station
     */
    private int neighborsWithStations(List<Station> stations, Station station) {
        assert (station != null);
        int neighbors = 0;
        List<Station> temp = stations;

        for (int i = 0; i < temp.size(); i++) {
            Station st = temp.get(i);
            System.out.println("st " + st);
            int id = station.getIdentifier();
            if (st.isNeighbor(id)) {
                neighbors++;
            }
        }

        return neighbors;
    }

    /**
     * this method is averaging the x and y from Xs and Ys of all stations of
     * the targetedStations list and then find the closed station to this
     * average x and y
     *
     * @param board
     * @param targetedSations
     * @return closest station to average x and y
     */
    private Station closestToAverageOfStations(Board board, List<Station> targetedSations) {
        Station station = null;
        double xSum = 0.0;
        double ySum = 0.0;
        for (int i = 0; i < targetedSations.size(); i++) {
            xSum = xSum + targetedSations.get(i).getPos().x();
            ySum = ySum + targetedSations.get(i).getPos().y();
        }
//        Position pos = new Position(xSum / (double) targetedSations.size(), ySum /
//                (double) targetedSations.size());
//
//        station = board.closestStationToPosition( new Position(xSum / (double) targetedSations.size(), ySum /
//                (double) targetedSations.size()));

        return board.closestStationToPosition(new Position(xSum / (double) targetedSations.size(), ySum
                / (double) targetedSations.size()));
    }

    /**
     * This method is checking if the given station is occupied by a detective
     *
     * @param players
     * @param station
     * @return true if occupied
     */
    private boolean isOccupiedByDetectives(Player[] players, Station station) {
        boolean occupied = false;
        for (int i = 1; i < players.length && !occupied; i++) {
            if (players[i].getCurrStation() == station.getIdentifier()) {
                occupied = true;
            }
        }
        return occupied;
    }

    /**
     * this method is checking if the given player can move to the given
     * station. it checks if the player's current station is a neighbor of given
     * station and player can move to the station with its available ticket.
     *
     * @param p
     * @param st
     * @param br
     * @return true if player can move to given station
     */
    private boolean canMoveToStation(Station curr, Station st, Board br) {
        boolean canMove = false;
        canMove = canMove || (br.hasTaxiNeighbor(curr.getIdentifier(), st.getIdentifier())
                && this.getNumOfTaxis() > 0);

        canMove = canMove || (br.hasBusNeighbor(curr.getIdentifier(), st.getIdentifier())
                && this.getNumOfBuses() > 0);

        canMove = canMove || (br.hasTrainNeighbor(curr.getIdentifier(), st.getIdentifier())
                && this.getNumOfTrains() > 0);

        canMove = canMove || (br.hasBoatNeighbor(curr.getIdentifier(), st.getIdentifier())
                && this.getNumOfBoats() > 0);
        return canMove;
    }

    /**
     * this method is counting how many available stations are from the given
     * station. the player should have ticket to go.
     *
     * @param st
     * @param br
     * @return int number of available stations
     */
    private double numberOfAvailableStations(Station st, Board br) {
        //List<Station> station = listOfAllNeighbors(st);st.getAllNeighbors()
        List<Station> station = st.getAllNeighbors();
        boolean removed = false;
        for (int j = 0; j < station.size() && !removed; j++) {
            if (!canMoveToStation(st, station.get(j), br)) {
                station.remove(j);
                j--;
                removed = true;
            }
        }

        return station.size();
    }

//    /**
//     * this method is checking if the player can use more means of transport
//     * from current station to given station
//     *
//     * @param st
//     * @param neighborId
//     * @return boolean with true values if there is route.
//     */
//    private boolean[] routesByMeans(Station st, int neighborId) {
//        assert (st != null);
//        return st.HasMoreNeighbors(neighborId);
//    }
    /**
     * this method checks if the player is neighboring with a train station and
     * that station is free. if there are more than one train stations the
     * smallest one will be chosen
     *
     * @param players
     * @param board
     * @return station of train with smallest id and if is free.
     */
    private Station trainStationNeighbor(Player[] players, Board board) {
        Station station = null;
        boolean found = false;
        List<Station> stations = board.getStation(this.getCurrStation()).getAllNeighbors();
        for (int i = 0; i < stations.size(); i++) {
            if (stations.get(i).getTrainNeighbors().length > 0 && !isOccupiedByDetectives(players, stations.get(i))
                    && canMoveToStation(board.getStation(this.getCurrStation()), stations.get(i), board)) {
                if (station == null) {
                    station = stations.get(i);
                } else {
                    if (stations.get(i).getIdentifier() < station.getIdentifier()) {
                        station = stations.get(i);
                    }
                }
            }
        }

        return station;
    }

//    /**
//     * this method return all methods of the given station
//     *
//     * @param st
//     * @param board
//     * @return list of stations
//     */
//    @Override
//    protected List<Station> listOfAllNeighbors(Station st) {
//
//        return st.getAllNeighbors();
//    }
//    /**
//     * this method is returning the smallest amount of all means of transport
//     *
//     * @return int the smallest amount(TODO) changed i
//     */
//    @Override
//    protected int getMinTicket() {
//        int number = getAllTickets()[0];
//        for (int i = 1; i < Tickets.values().length - 1; i++) {
//            if (getAllTickets()[i] < number) {
//                number = getAllTickets()[i];
//            }
//        }
//        return number;
//    }
    List<Station> bestPath(Station start, Station destination, Player[] players) {

        LinkedList<List<Station>> routesQueue = new LinkedList<>();
        Map<Station, Integer> visited = new HashMap<>();
        visited.put(start, 0);
        List<Station> firstRoute = new ArrayList<>();
        firstRoute.add(start);
        routesQueue.add(firstRoute);
        List<Station> bestRoute = new LinkedList<>();

        while (!routesQueue.isEmpty()) {

            List<Station> route = routesQueue.remove();
            Station lastStation = route.get(route.size() - 1);
            if (lastStation.equals(destination)) {

                route.forEach(s -> System.out.print(s.getIdentifier() + " "));
                System.out.println();
                if (bestRoute.isEmpty()) {
                    bestRoute = route;
                } else {
                    if (route.size() < bestRoute.size() || (route.size() == bestRoute.size()
                            && route.get(1).getIdentifier() < bestRoute.get(1).getIdentifier())) {
                        bestRoute = route;
                    }
                }
            }

            for (Station child : lastStation.getAllNeighbors()) {
                if (!isOccupiedByDetectives(players, child) && (!visited.containsKey(child) || visited.get(child) == route.size())) {
                    List<Station> newRoute = new ArrayList<>();
                    newRoute.addAll(route);
                    newRoute.add(child);
                    visited.put(child, route.size());
                    routesQueue.add(newRoute);
                }
            }
        }

        return bestRoute;
    }

}
