/**
 * JSON Schema is a declarative language for validating the format and structure
 * of a JSON Object. It allows us to specify the number of special primitives to
 * describe exactly what a valid JSON Object will look like.
 */
package logic;

import com.sun.deploy.net.socket.UnixSocketException;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author ite102770
 */
public class JsonValidation {

    private int errorNumber = 0;
    private int identifierError = 0;
    JSONArray stations = null;
    JSONObject jsonObj = null;
    JSONObject keys = null;
    private int errorLoadNum = 0;
    JSONObject json;

   

    public JsonValidation() throws JSONException {
//        if (errorLoadNum == 0) {
//            loadFileValidation(json);
//        }
//        if (errorLoadNum == 0) {
//            checkMisterXKeys(json);
//        }
//        if (errorLoadNum == 0) {
//            checkArraysLength(json);
//        }
    }

    JsonValidation(Stations[] stations) {
       assert stations != null;
     
        errorNumber = validationOfMap(stations);
//        if (errorNumber == 0) {
//            errorNumber = checkKeysValidation(stations);
//        }
        
    }

    int getErrorNumber() {
        return this.errorNumber;
    }

    int getIDErrorNumber() {
        return this.identifierError;
    }

//    public int JsonValidation(Stations[] stations) throws JSONException {
//        assert stations != null;
//     
//        errorNumber = validationOfMap(stations);
//        if (errorNumber == 0) {
//            errorNumber = checkKeysValidation(stations);
//        }
//        return errorNumber;
//    }

//    private int stationHasKey(Stations[] stations) throws JSONException {
//       Stations key = new Stations();
//        for (int i = 0; i < stations.length; i++) {
//            key = stations[i];
//            if (!((Integer) stations[i].getIdentifier() instanceof Integer)) {
//                errorNumber = 2;
//            } else if (stations[i].getPosition().equals(null)) {
//                errorNumber = 3;
//            } else if (stations[i].getTube().equals(null)) {
//                errorNumber = 4;
//            } else if (stations[i].getBus().equals(null)) {
//                errorNumber = 5;
//            }
//              else if (stations[i].getCab().equals(null)) {
//                errorNumber = 5;
//            }else if (stations[i].getBoat().equals(null)) {
//                errorNumber = 6;
////            } else if (stations[i].getPosition() || 
////                    !keys.optJSONObject("position").has("y")) {
////                errorNumber = 7;
//            }
//        }
//     
//        return errorNumber;
//    }
//    private int checkKeysValidation(Stations[] stations) throws JSONException {
//        // System.out.println("inside checkIdentifier");
//        for (int i = 0; i < stations.length; i++) {
//            if (stations[i].getIdentifier() <= 0 || stations[i].getIdentifier() >= 200) {
//                errorNumber = 9;
//            }
//            if (stations[i].getPosition().x() < 0.0
//                    || stations[i].getPosition().x() >= 1.0) {
//                errorNumber = 10;
//            }
//            if (stations[i].getPosition().y() < 0.0
//                    || stations[i].getPosition().y() > 1.0 && errorNumber == 0) {
//                errorNumber = 11;
//            }
//
//        }
//        return errorNumber;
//    }

    private int loadFileValidation(JSONObject json) {
        if (!json.has("misterX")) {
            errorLoadNum = 1;
        } else if (!json.has("detectives")) {
            errorLoadNum = 2;
        } else if (!json.has("whoseTurn")) {
            errorLoadNum = 3;
        } else if (!json.has("currRoundNo")) {
            errorLoadNum = 4;
        } else if (!json.has("gameIsWon")) {
            errorLoadNum = 5;
        }
        return errorLoadNum;
    }

    private int checkMisterXKeys(JSONObject json) throws JSONException {
        JSONObject misterX = json.getJSONObject("misterX");
        if (!misterX.has("ai")) {
            errorLoadNum = 6;
        } else if (!misterX.has("possibleTargets")) {
            errorLoadNum = 7;
        } else if (!misterX.has("lastShownPos")) {
            errorLoadNum = 8;
        } else if (!misterX.has("currPos")) {
            errorLoadNum = 9;
        } else if (!misterX.has("remainingTickets")) {
            errorLoadNum = 10;
        } else if (!misterX.has("journeyBoard")) {
            errorLoadNum = 11;
        }
        return errorLoadNum;
    }

    private int checkArraysLength(JSONObject json) throws JSONException {
        JSONObject misterX = json.getJSONObject("misterX");
        if (misterX.has("possibleTargets")) {
            if (misterX.getJSONArray("possibleTargets").length() < 0) {
                errorLoadNum = 12;
            }
        }
        for (int i = 0; i < misterX.getJSONArray("possibleTargets").length(); i++) {
            Object key = misterX.getJSONArray("possibleTargets").get(i);
            if (misterX.has("possibleTargets")) {
                if (!(key instanceof Integer)) {
                    errorLoadNum = 13;
                }
            }

        }
        for (int i = 0; i < misterX.getJSONArray("remainingTickets").length(); i++) {
            Object key = misterX.getJSONArray("remainingTickets").get(i);
            if (misterX.has("remainingTickets")) {
                if (!(key instanceof Integer)) {
                    errorLoadNum = 14;
                }
            }

        }
        for (int i = 0; i < misterX.getJSONArray("journeyBoard").length(); i++) {
            Object key = misterX.getJSONArray("journeyBoard").get(i);
            if (misterX.has("journeyBoard")) {
                if (!(key instanceof Integer)) {
                    errorLoadNum = 15;
                }
            }

        }
        return errorLoadNum;
    }

    private int checkTypeOfKeys(JSONObject json) throws JSONException {
        JSONObject misterX = json.getJSONObject("misterX");
        if (misterX.has("lastShownPos")) {
            if (!(misterX.get("lastShownPos") instanceof Integer)) {
                errorLoadNum = 16;
            }
        }
        if (misterX.has("currPos")) {
            if (!(misterX.get("currPos") instanceof Integer)) {
                errorLoadNum = 16;
            }
        }
//            if (misterX.get("currPos") < 0 || misterX.get("currPos") > 200) {
//                errorLoadNum = 16;
//            } else {
//            }
        return errorLoadNum;
    }

     int validationOfMap(Stations[] stations) {

        boolean hasError = false;

        if (stations.length != 199) {
            hasError = true;
            errorLoadNum = 1;
            identifierError = 0;
            //gui.showError("json: stations size ");
        }
        for (int i = 0; i < stations.length && !hasError; i++) {
            if (stations[i].getIdentifier() < 1 || stations[i].getIdentifier() > 199) {
                hasError = true;
                errorLoadNum = 2;
                identifierError = i;
                // gui.showError("json: id of station "+ i+ " ");
            }
            if (!hasError && stations[i].getPosition().x() < 0.0 || stations[i].getPosition().x() > 1.0
                    || stations[i].getPosition().y() < 0.0 || stations[i].getPosition().y() > 1.0) {
                hasError = true;
                errorLoadNum = 3;
                identifierError = i;
                // gui.showError("json: pos of station "+ i+" ");
            }
            for (int j = 0; j < stations[i].getTube().length && !hasError; j++) {
                if (stations[i].getTube()[j] < 1 || stations[i].getTube()[j] > 199) {
                    hasError = true;
                    errorLoadNum = 4;
                    identifierError = i;
                    // gui.showError("json: train neighbor "+ i +" ");
                }
            }
            for (int j = 0; j < stations[i].getBus().length && !hasError; j++) {
                if (stations[i].getBus()[j] < 1 || stations[i].getBus()[j] > 199) {
                    hasError = true;
                    errorLoadNum = 5;
                    identifierError = i;
                    // gui.showError("json: bus neighbor "+ i +" ");
                }
            }
            for (int j = 0; j < stations[i].getCab().length && !hasError; j++) {
                if (stations[i].getCab()[j] < 1 || stations[i].getCab()[j] > 199) {
                    hasError = true;
                    errorLoadNum = 6;
                    identifierError = i;
                    //gui.showError("json: taxi neighbor "+ i +" ");
                }
            }
            for (int j = 0; j < stations[i].getBoat().length && !hasError; j++) {
                if (stations[i].getBoat()[j] < 1 || stations[i].getBoat()[j] > 199) {
                    hasError = true;
                    errorLoadNum = 7;
                    identifierError = i;
                    //gui.showError("json: boat neighbor "+ i +" ");
                }
            }
        }

        return errorLoadNum;
    }

}
