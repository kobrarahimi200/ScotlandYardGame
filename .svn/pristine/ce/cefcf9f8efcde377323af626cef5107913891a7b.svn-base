package logic;

import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.stream.JsonWriter;
import com.sun.corba.se.impl.orbutil.ObjectWriter;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;
import static jdk.nashorn.internal.objects.NativeArray.map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;
import java.lang.Object;

public class IO {

    String inPath = "C:\\Users\\Reyhan\\Desktop\\map.json";
    FileOutputStream f = null;
    FileChooser fileChooser = null;
    OutputStreamWriter o = null;
    Object saveObj;

    public JSONArray getJsonValues() throws JSONException {
        Gson gson = new Gson();
        JSONArray jarray = null;
        try (FileReader reader = new FileReader("net.json")) {
            Object obj;
            obj = gson.fromJson(reader, Object.class);
            JSONObject jo2 = new JSONObject(obj.toString());
            //jarray = jo2.getJSONObject(obj.toString()).getJSONArray("stations");
            jarray = jo2.getJSONArray("stations");
            for (int i = 0; i < jarray.length(); i++) {
                JSONObject pos = jarray.getJSONObject(i);
                // Map2 m = jarray.get(i);

                // System.out.println(pos.get("position"));
            }

        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return jarray;
    }

    public static boolean isJSONValid(String test) {
        try {
            JSONObject jsonObject = new JSONObject(test);
        } catch (JSONException ex) {
            // edited, to include @Arthur's comment
            // e.g. in case JSONArray is valid as well...
            try {
                JSONArray jsonArray = new JSONArray(test);
            } catch (JSONException ex1) {
                return false;
            }
        }
        return true;
    }

    public void saveField(GUIConnector gui, Player[] p, int idxPlayer) throws IOException, JSONException {

        FileChooser chooser = new FileChooser();
        chooser.setInitialDirectory(new File(System.getProperty("user.dir")));
        chooser.setTitle("Choose location To Save Report");
        File selectedFile = null;
        if (selectedFile == null) {
            chooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter(".json", ".json"),
                    new ExtensionFilter(".txt", ".txt"));
            selectedFile = chooser.showSaveDialog(null);
        }
        if (selectedFile != null) {
            saveObj = setSave(true, 0, 128);
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
          
            try (FileWriter writer = new FileWriter(selectedFile.getPath())) {
                gson.toJson(saveObj, writer);
                //JSON.write(writer, data);
                //  writer.endObject();
                writer.flush();

            } catch (IOException e) {
            }
        }
    }

    private Object setSave(boolean isMisterxAI, int lastPosMisterX, int currPosMisterX) throws JSONException {
        int[] possibleTargets = new int[0];
        int[] remainingTikets = new int[4];
        int[] journeyBoard = new int[2];
        JsonArray players = new JsonArray();
        JsonObject MisterX = new JsonObject(); //add new json object
        JsonObject detectives = new JsonObject(); 
        MisterX.addProperty("ai", isMisterxAI);
        MisterX.add("possibleTargets", new Gson().toJsonTree(possibleTargets));//add json lement to object
        MisterX.addProperty("lastShownPos", lastPosMisterX);
        MisterX.addProperty("currPos", currPosMisterX);//add value to json object
        MisterX.add("remainingTikets", new Gson().toJsonTree(remainingTikets));
        MisterX.add("journeyBoard", new Gson().toJsonTree(journeyBoard));
        //detectives
        detectives.addProperty("ai", isMisterxAI);
        detectives.add("players", new Gson().toJsonTree(players));
        players.add(124);
        players.add( new Gson().toJsonTree(MisterX));
        JsonObject jobj = new JsonObject();
        jobj.add("misterX", new Gson().toJsonTree(MisterX));
        jobj.add("detectives", new Gson().toJsonTree(detectives));
        jobj.addProperty("whoseTurn", 1);
        jobj.addProperty("currRoundNo", 2);
        jobj.addProperty("gameIsWon", false);
        MisterX = jobj;
        return MisterX;
    }
}
