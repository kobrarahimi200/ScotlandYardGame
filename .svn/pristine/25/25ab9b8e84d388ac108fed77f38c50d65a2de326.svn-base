package logic;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/**
 *
 * @author Reyhan
 */
public class MisterX extends Player {

    int numOfTurns;
    private int lastShowPos;
    private List<Integer> journeyBoard; // store all used ticket
    List<Station> neighborsMisterX;
    private Choose choose;

    public MisterX(int id, playerType type, boolean isAI, int numOfTrains, int numOfBuses,
            int numOfTaxis, int numOfBoats) {
        super(id, type, isAI, numOfTrains, numOfBuses, numOfTaxis, numOfBoats);
        this.numOfTurns = 0;
        lastShowPos = 0;
        journeyBoard = new ArrayList<>();
        choose = null;
    }
//    private static final List<Integer> SHOULDNT_USE_BLACK_FAIR_ROUNDS = new ArrayList<>(
//            Arrays.asList(1, 2, 3, 8, 13, 18, 24)
//    );

    @Override
    protected List<Integer> getJournyList() {
        return journeyBoard;
    }

    @Override
    protected int getnumOfTurns() {
        return numOfTurns;
    }

    @Override
    protected void incNumOfTurns() {
        numOfTurns++;
    }

    @Override
    protected int lastShownPos() {
        return lastShowPos;
    }

    @Override
    protected void addToJourneyList(Tickets ticket) {
        journeyBoard.add(Tickets.valueOf(ticket.toString()).ordinal());
    }

    @Override
    protected Choose getChoosedAI() {
        return this.choose;
    }

    /**
     * calculates the first condition (numOfDetectives - detectiviesAccess)*10
     * second condition :( numOfFreeNeighbors of neighbors / 13)*4
     *
     * @param board
     * @param p
     */
    @Override
    void AI(Board board, Player[] p) {
        // double second;
        // Station st = board.getStation(p[0].getCurrStation());
        List<Station> neighbors = getAllFreeNeighbors(board, p);
        //assert (!neighbors.isEmpty());//is it true??
        // second = 0.0;
        boolean[] routes;
        if (!neighbors.isEmpty()) {
            double totalValue = 0.0;
            for (int i = 0; i < neighbors.size(); i++) {
                if (canPlayMisterX(board, this, this.getCurrStation(), neighbors.get(i))) {
                    routes = hasEnoughTicket(board, neighbors.get(i).getIdentifier());
                    for (int j = 0; j < routes.length; j++) {
                        if (routes[j] && this.getTicketType(Tickets.values()[j]) > 0) {
                            Tickets ticket = Tickets.values()[j];
                            Choose ch = chooseNeighbors(board, neighbors.get(i), totalValue, p, ticket, false);
                            if (ch != null && ch.getWeight() > totalValue) {
                                choose = ch;
                                totalValue = ch.getWeight();
                            }
                            if (this.getNumOfBoats() > 0) {//num of boats
                                ch = chooseNeighbors(board, neighbors.get(i), totalValue, p, ticket, true);
                                if (ch != null && ch.getWeight() > totalValue) {
                                    choose = ch;
                                    totalValue = ch.getWeight();
                                }
                            }
                        }
                    }
                }
            }
        } else {
            choose = null;
        }
        //System.out.println("ai" + choose.getStation());
        // return choose;
    }

    /**
     * calculate and select the best neighbors from the stations
     *
     * @param station
     * @param total
     * @param p
     * @param board
     * @param ticket
     * @param useBlackTicket
     * @return
     */
    private Choose chooseNeighbors(Board board, Station station, double total, Player[] p,
            Tickets ticket, boolean useBlackTicket) {

        double ticketCount = 0.0;
        Choose choosed = null;
        double firstWeight;
        double secondWeight;
        if (!useBlackTicket) {
            this.decTicket(ticket);
        }
        firstWeight = ((p.length - 1) - numberOfDetectiveAccess(board, p, station)) * 10;
        secondWeight = countPossibleFreeStations(board, p, station) / 13.0 * 4.0;

        if (this.getMinTicket() > 2) {
            ticketCount = 3;
        } else {
            this.getMinTicket();
        }
        if ((firstWeight + secondWeight + ticketCount) > total) {
            total = (firstWeight + secondWeight + ticketCount);
            if (!useBlackTicket) {
                choosed = new Choose(ticket, station, total);
                this.setWeight(total);
            } else {
                choosed = new Choose(Tickets.BOAT, station, total);
                 this.setWeight(total);
            }
        }
        if (!useBlackTicket) {
            this.incTicket(ticket);
        }
        return choosed;
    }

    /**
     * store all neighbors of neighbors of current station of mister x that they
     * do not contain the detectives
     *
     * @param board
     * @param p
     * @param s is the all neighbors of mister x(neighborsMisterX list)
     * @return
     */
    @Override
    int countPossibleFreeStations(Board board, Player[] p, Station s) {
        //int count = 0;
        System.out.println("size " + board.getAllStations().size());
        boolean added;
        List<Station> st = new LinkedList<>();
        for (int i = 0; i < board.getAllStations().size(); i++) {
            added = false;
            if (s.isNeihbor(i + 1) && !st.contains(board.getAllStations().get(i))) {
                st.add(board.getAllStations().get(i));
                added = true;
            }

            for (int j = 1; j < p.length && added; j++) {
                if (!s.canPlay(i + 1, this)
                        || p[j].getCurrStation() == board.getAllStations().get(i).getIdentifier()) {
                    System.out.println("station " + s.getIdentifier() + " " + s.getBoatNeighbors().length);
                    st.remove(board.getAllStations().get(i));
                }
            }
        }

        return st.size();
    }

    /**
     * gets all neighbors of mister x and store into a list and remove all nodes
     * contains detectives
     *
     * @param board
     * @param p
     * @return
     */
    @Override
    List<Station> getAllFreeNeighbors(Board board, Player[] p) {
        neighborsMisterX = new LinkedList<>();

        for (int i = 0; i < board.getAllStations().size(); i++) {
            if (board.getStation(this.getCurrStation()).isNeihbor(i + 1)) {
                neighborsMisterX.add(board.getAllStations().get(i));
            }
        }
        neighborsMisterX = removeDetectiveFrom(p);
        return neighborsMisterX;
    }

    /**
     * remove stations from neighborsMisterX which contains detectives
     *
     * @param p
     * @return
     */
    private List<Station> removeDetectiveFrom(Player[] p) {
        boolean removed;
        for (int j = 1; j < p.length; j++) {
            removed = false;
            for (int i = 0; i < neighborsMisterX.size() && !removed; i++) {
                if (p[j].getCurrStation() == neighborsMisterX.get(i).getIdentifier()) {
                    neighborsMisterX.remove(i);
                    i--;
                    removed = true;
                }
            }
        }
        return neighborsMisterX;
    }

    /**
     * counts the number of neighbor station of mister x which detective can
     * reach them
     *
     * @param board
     * @param p
     * @param s
     * @return
     */
    private int numberOfDetectiveAccess(Board board, Player[] p, Station s) {
        int x = 0;
        for (int i = 1; i < p.length; i++) {
            if (board.isNeighbor(p[i].getCurrStation(), s.getIdentifier())
                    && board.canPlay(s.getIdentifier(), p[i])) {
                x++;
            }
        }
        System.out.println("NOOfdetective Access" + x + ", station: " + s.getIdentifier());
        return x;
    }

    private boolean canPlayMisterX(Board board, Player p, int current, Station s) {

        boolean allowedToPlay = false;
        allowedToPlay = (board.hasTaxiNeighbor(current, s.getIdentifier()) && (p.getNumOfTaxis() > 0
                || p.getNumOfBoats() > 0)) || allowedToPlay;
        allowedToPlay = (board.hasBusNeighbor(current, s.getIdentifier()) && (p.getNumOfBuses() > 0
                || p.getNumOfBoats() > 0)) || allowedToPlay;
        allowedToPlay = (board.hasTrainNeighbor(current, s.getIdentifier()) && (p.getNumOfTrains() > 0
                || p.getNumOfBoats() > 0)) || allowedToPlay;
        allowedToPlay = (board.hasBoatNeighbor(current, s.getIdentifier()) && p.getNumOfBoats() > 0)
                || allowedToPlay;
        return allowedToPlay;
    }

    /**
     * checks if mister x has enough ticket to go to the given station
     *
     * @param board
     * @param station
     * @return
     */
    private boolean[] hasEnoughTicket(Board board, int station) {
        return board.checkIfNeihbor(station, this.getCurrStation(), this);
    }

}
