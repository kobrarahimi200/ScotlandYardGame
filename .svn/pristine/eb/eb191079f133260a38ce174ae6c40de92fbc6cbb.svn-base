package logic;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/**
 *
 * @author Reyhan
 */
public class MisterX extends Player {

    int numOfTurns;
    private int lastShowPos;
    private List<Integer> journeyBoard; // store all used ticket
    List<Station> neighborsMisterX;

    public MisterX(int id, playerType type, boolean isAI, int numOfTrains, int numOfBuses, int numOfTaxis, int numOfBoats) {
        super(id, type, isAI, numOfTrains, numOfBuses, numOfTaxis, numOfBoats);
        this.numOfTurns = 0;
        lastShowPos = 0;
        journeyBoard = new ArrayList<>();
    }

    @Override
    protected List<Integer> getJournyList() {
        return journeyBoard;
    }

    @Override
    protected int getnumOfTurns() {
        return numOfTurns;
    }

    @Override
    protected void incNumOfTurns() {
        numOfTurns++;
    }

    @Override
    protected int lastShownPos() {
        return lastShowPos;
    }

    @Override
    protected void addToJourneyList(Tickets ticket) {
        journeyBoard.add(Tickets.valueOf(ticket.toString()).ordinal());
    }

    /**
     * gets all neighbors of mister x and store into a list
     *
     * @param board
     * @param p
     * @return
     */
    @Override
    List<Station> getAllFreeNeighbors(Board board, Player[] p) {
        neighborsMisterX = new LinkedList<>();
        int sum = 0;
        for (int i = 0; i < board.getAllStations().size(); i++) {
            if (board.getStation(this.getCurrStation()).isNeihbor(i + 1)) {
                neighborsMisterX.add(board.getAllStations().get(i));
            }
        }

        neighborsMisterX = removeDetectiveFrom(p);
        sum = ((p.length - 1) - countDetectiveAccess(board, p, board.getStation(this.getCurrStation()))) * 10;
        System.out.println("numOfDetecNei "+ countDetectiveAccess(board, p, board.getStation(this.getCurrStation())) );
        System.out.println("sum " + sum);
        return neighborsMisterX;
    }

    /**
     * remove stations from neighborsMisterX which contains detectives
     *
     * @param p
     * @return
     */
    private List<Station> removeDetectiveFrom(Player[] p) {
        for (int j = 1; j < p.length; j++) {
            for (int i = 0; i < neighborsMisterX.size(); i++) {
                if (p[j].getCurrStation() == neighborsMisterX.get(i).getIdentifier()) {
                    neighborsMisterX.remove(i);
                }
            }
        }
        return neighborsMisterX;
    }

    /**
     * counts the number of neighbor station of mister x which detective can
     * reach them
     *
     * @param board
     * @param p
     * @param s
     * @return
     */
    private int countDetectiveAccess(Board board, Player[] p, Station s) {
        int x = 0;
        for (int i = 1; i < p.length; i++) {
            if (board.isNeighbor(p[i].getCurrStation(), s.getIdentifier())
                    && board.canPlay(s.getIdentifier(), p[i])) {
                x++;
            }
        }
        return x;
    }

}
